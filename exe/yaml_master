#!/usr/bin/env ruby

require "optparse"
require "yaml_master"

options = {properties: []}

opt_parser = OptionParser.new do |opts|
  opts.on("-m", "--master=MASTER_FILE", "master yaml file") do |master|
    options[:master] = master
  end

  opts.on("-k", "--key=KEY", "single generate target key (in data: block)") do |key|
    options[:key] = key
  end

  opts.on("-o", "--output=OUTPUT", "output filename for single generate target") do |output|
    options[:output] = output
  end

  opts.on("-a", "--all", "target all key (defined in yaml_master: block)") do |all|
    options[:all] = true
  end

  opts.on("-d", "--dump", "dump evaluated master yaml") do ||
    options[:dump] = true
  end

  opts.on("-p", "--properties=PROPERTIES", %q{set property (--properties="NAME=VALUE,NAME=VALUE" or -p "NAME=VALUE" -p "NAME=VALUE")}) do |properties|
    options[:properties].concat(properties.split(/\s*,\s*/))
  end

  opts.on("-v", "--verbose", "verbose mode") do |verbose|
    options[:verbose] = true
  end

  opts.on("--version", "Print version") do
    puts YamlMaster::VERSION
    exit
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

opt_parser.parse!(ARGV)

unless options[:master]
  puts "--master options is necessary"
  puts opt_parser
  exit 1
end

if options[:all].nil? && options[:key].nil? && options[:dump].nil?
  puts "--all or --key or --dump is necessary"
  puts opt_parser
  exit 1
end

yaml_master = YamlMaster.new(options[:master], options[:properties])

if options[:all]
  yaml_master.generate_all(verbose: options[:verbose])
elsif options[:dump]
  result = yaml_master.dump(options[:output], {verbose: options[:verbose]})
  puts result unless options[:output]
else
  result = yaml_master.generate(options[:key], options[:output], {verbose: options[:verbose]})
  puts result unless options[:output]
end
